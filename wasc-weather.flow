[
    {
        "id": "5f174a19.c0f3a4",
        "type": "subflow",
        "name": "dom property",
        "info": "Get\n - a property or all properties for a specific device or\n - all device properties\n\n## Node Properties\n### Host\nIP address of the Domoticz System.\nUse 127.0.0.1 if Node-RED is running on the same system as Domoticz.\nDefault: 127.0.0.1\n\n### Port\nPort used by the Domoticz System.\nDefault: 8080\n\n### Context\nIf set to true, the global context value _domip_ for the Host & Port is used.\n`global.get(\"domip\")`\nDefault: false\n\n### Idx (Number)\nIdx of the device.\nIf the Idx is set to 0, then the status of ALL devices is returned. To select a device, use `msg.payload.result[index]`. The index start with 0 - array size -1.\n\n### Property (String)\nProperty of the device, taken from the HTTP API request result. Example: name or Temp.\nIf left blank, the full status is returned from which a property can be selected. Example:\n`msg.payload.Name` or `msg.payload.Temp`.\n\n### Input (JSON String)\nIf set to true, the input msg.payload is taken from a JSON string. The properties Idx & Property are not used. The JSON format: `{\"idx\":idx,\"property\":property}`.\nExample:\n`msgtemperature.payload = '{\"idx\":' + msg.payload.temperature+ ',\"property\":\"Temp\" }';\n`\n### Warn (Boolean)\nIf set to true, ode warn messages are logged.\n\n## Output\nValue of a single device property, all device properties or all devices properties.\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "1310efed.3ef4b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 180,
                "wires": [
                    {
                        "id": "2c4a6a11.7d82b6",
                        "port": 0
                    },
                    {
                        "id": "dc23718d.8e4ac",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Host",
                "type": "str",
                "value": "http://127.0.0.1"
            },
            {
                "name": "Port",
                "type": "num",
                "value": "8080"
            },
            {
                "name": "Context",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "Idx",
                "type": "num",
                "value": "0"
            },
            {
                "name": "Property",
                "type": "str",
                "value": "Name"
            },
            {
                "name": "Input",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "Warn",
                "type": "bool",
                "value": "false"
            }
        ],
        "color": "#DDAA99",
        "status": {
            "x": 740,
            "y": 260,
            "wires": [
                {
                    "id": "dc23718d.8e4ac",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "8d7eee82.ad127",
        "type": "http request",
        "z": "5f174a19.c0f3a4",
        "name": "Send HTTP Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 480,
        "y": 120,
        "wires": [
            [
                "44073955.f263a8"
            ]
        ]
    },
    {
        "id": "1310efed.3ef4b",
        "type": "function",
        "z": "5f174a19.c0f3a4",
        "name": "Set URL HTTP API Request",
        "func": "// Define the url for the http api request to get the devices status for given idx\n// The url syntax:\n// http://host-ip/json.htm?type=devices&rid=idx\n\n// Check if node warn log messages\nvar warn = env.get(\"Warn\");\nif (warn === undefined) warn = false;\n\n// Get the idx & property first\nvar idx = env.get(\"Idx\");\nvar property = env.get(\"Property\");\n\n// Check if to use input msg.payload as JSON string {\"idx\":idx,\"property\",property}\nvar input = env.get(\"Input\");\nif (input === true){\n    try {\n        const obj = JSON.parse(msg.payload);\n        idx = obj.idx;\n        property = obj.property;\n        if (warn === true) node.warn(\"Input JSON:\"+idx+\",\"+property);\n    } catch (e) {\n        if (warn === true) node.warn(\"Input message is not JSON format.\"+msg.payload);\n    }\n}\n    \n// Set the flow vars - used on other function nodes\nflow.set(\"idx\",idx);\nflow.set(\"property\",property)\n\n// Url & parameter\nvar url;\nvar urlparameter;\nvar alldevices = false;\n// Check the idx. If 0 get status all devices\nif (idx > 0) {\n    urlparameter = \"/json.htm?type=devices&rid=\" + idx;\n}\nif (idx === 0) {\n    urlparameter = \"/json.htm?type=devices&used=true&displayhidden=0\";\n    alldevices = true;\n}\n\n// Set the initial url using host & port\nconst usecontext = env.get(\"Context\");\nif (usecontext === true){\n    url = global.get(\"domip\");\n} else {\n    url = env.get(\"Host\") + \":\" + env.get(\"Port\");\n}\n\n// Define the url \nmsg.url = url + urlparameter;\n\nif (warn === true) node.warn(msg.url);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "8d7eee82.ad127"
            ]
        ]
    },
    {
        "id": "44073955.f263a8",
        "type": "json",
        "z": "5f174a19.c0f3a4",
        "name": "Convert Result",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 260,
        "y": 180,
        "wires": [
            [
                "2c4a6a11.7d82b6"
            ]
        ]
    },
    {
        "id": "2c4a6a11.7d82b6",
        "type": "function",
        "z": "5f174a19.c0f3a4",
        "name": "Get Device Status or Device Property",
        "func": "// Get the (all) device status or selected property\n// If the key Idx is 0, the status of all devices is returned\n// If the key Property is left blank get full device status\n// A property can be selected by using its key from the msg.payload\n// Example: msg.payload.Temp\n// If the idx is not found, an undefined msg is returned\n\n// Debug flag\nvar warn = env.get(\"Warn\");\nif (warn === undefined) warn = false;\n\n// Assign the array key result and check the size\nconst result = msg.payload.result;\n\n// Array result contains single entry for a device\nif (result.length == 1){\n    // Device status from the array key result first (and only entry)\n    const status = result[0];\n    if (status !== undefined){\n        // Get the propertykey for the given key\n        var propertyKey = flow.get(\"property\");\n        // If no property key given, select the full status\n        if (propertyKey.length === 0) {\n            msg.payload = status\n            if (warn === true) node.warn(\"SINGLERESULTFULL:\"+\"Idx:\"+status.idx+\", FULL result\");\n        } else {\n            // Set the msg payload by assigning the property key\n            msg.payload = status[propertyKey];\n            if (warn === true) node.warn(\"SINGLERESULTPROP:\"+\"Idx:\"+status.idx+\", Property:\"+propertyKey+\", Value:\"+msg.payload);\n        }   \n    } else {\n        msg.payload = undefined;\n    }\n}\n\n// Array result contains multiple entries\nif (result.length > 1){\n    msg.payload = result;\n    if (warn === true) node.warn(\"MULTIPLERESULTS:\"+msg.payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "84f9e515.98a678",
        "type": "comment",
        "z": "5f174a19.c0f3a4",
        "name": "Subflow Domoticz Property (dom property)",
        "info": "See the subflow description.\n",
        "x": 180,
        "y": 40,
        "wires": []
    },
    {
        "id": "6aea601f.cb02",
        "type": "catch",
        "z": "5f174a19.c0f3a4",
        "name": "Catch Error HTTP & JSON",
        "scope": [
            "8d7eee82.ad127",
            "44073955.f263a8"
        ],
        "uncaught": false,
        "x": 130,
        "y": 240,
        "wires": [
            [
                "57d35e8f.86a1b",
                "dc23718d.8e4ac"
            ]
        ]
    },
    {
        "id": "57d35e8f.86a1b",
        "type": "debug",
        "z": "5f174a19.c0f3a4",
        "name": "DEBUG CATCHDOMPROPERTY",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 500,
        "y": 300,
        "wires": []
    },
    {
        "id": "dc23718d.8e4ac",
        "type": "function",
        "z": "5f174a19.c0f3a4",
        "name": "Set Status",
        "func": "var msgstatus = {};\nmsgstatus.payload = \"Ok\";\n// node.warn(msg.error.message);\nif (msg.error.message.length > 0){\n    msg.payload = \"Error\" + \" \" + msg.error.source.type;\n    msgstatus.payload = \"Error\";\n}\nreturn [msg,msgstatus];",
        "outputs": 2,
        "noerr": 0,
        "x": 610,
        "y": 240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a491c9dd.c8f358",
        "type": "tab",
        "label": "WASC-Weather",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9b2b5122.d1fa4",
        "type": "inject",
        "z": "a491c9dd.c8f358",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "6557d7f3.1124c"
            ]
        ]
    },
    {
        "id": "a4919460.946c88",
        "type": "comment",
        "z": "a491c9dd.c8f358",
        "name": "WASC-Weather - Tab Wetter, Group Wetter; Update every 5 minutes",
        "info": "Display Weather information - brief description.\n\nThe weather data is displayed using ui_gauges, type donut.\n\nEach device uses the subflow \"dom property\" to get one or more properties: Temperature=Temp (°C), Humidity=Humidity (%RH), Airpressure=Barometer (hPa), Windspeed=Gust (Bf).\n\nThe refresh button obtains the latest information.\n\nThe refresh date & time (Last Update) is displayed in an ui_template node.\n",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "938fff0.815b2",
        "type": "subflow:5f174a19.c0f3a4",
        "z": "a491c9dd.c8f358",
        "name": "Temp+Hum (idx=120,property=not used)",
        "env": [
            {
                "name": "Idx",
                "value": "120",
                "type": "num"
            },
            {
                "name": "Property",
                "value": "",
                "type": "str"
            }
        ],
        "x": 620,
        "y": 140,
        "wires": [
            [
                "6b83ad8c.a78534",
                "4709254a.84e6ac"
            ]
        ]
    },
    {
        "id": "6b83ad8c.a78534",
        "type": "ui_gauge",
        "z": "a491c9dd.c8f358",
        "name": "Temperature",
        "group": "29219136.44d3de",
        "order": 1,
        "width": "3",
        "height": "3",
        "gtype": "donut",
        "title": "",
        "label": "°C",
        "format": "{{msg.payload.Temp | number:1}}",
        "min": "-10",
        "max": "40",
        "colors": [
            "#295989",
            "#a8e600",
            "#ca3c3a"
        ],
        "seg1": "10",
        "seg2": "18",
        "x": 910,
        "y": 140,
        "wires": []
    },
    {
        "id": "4709254a.84e6ac",
        "type": "ui_gauge",
        "z": "a491c9dd.c8f358",
        "name": "Humidity",
        "group": "29219136.44d3de",
        "order": 2,
        "width": "3",
        "height": "3",
        "gtype": "donut",
        "title": "",
        "label": "%RH",
        "format": "{{msg.payload.Humidity | number:0}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#8a2861",
            "#00e667",
            "#0505ff"
        ],
        "seg1": "30",
        "seg2": "60",
        "x": 900,
        "y": 200,
        "wires": []
    },
    {
        "id": "8e1a463d.ef1288",
        "type": "ui_template",
        "z": "a491c9dd.c8f358",
        "group": "29219136.44d3de",
        "name": "Set Group Style",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<style>\n/*\n    For all elements in the group\n*/\n#Wetter_Wetter_cards {\n    font-size: 20px !important;\n    background-color: \"#FF0000\" !important;\n}\n\n/*\n    For all cardtitles\n.nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n    color: #ff0000;\n}\n*/\n\n/* \n    #RaspberryMatic_Dashboard_Hue_cardtitle {\n        font-size: 20px !important;\n        background-color: \"#FF0000\" !important;\n    }\n*/\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 100,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f14ecf6d.6b0fa",
        "type": "subflow:5f174a19.c0f3a4",
        "z": "a491c9dd.c8f358",
        "name": "Barometer (idx=116,property=Barometer)",
        "env": [
            {
                "name": "Idx",
                "value": "116",
                "type": "num"
            },
            {
                "name": "Property",
                "value": "Barometer",
                "type": "str"
            }
        ],
        "x": 620,
        "y": 260,
        "wires": [
            [
                "f4ad29da.d94c78"
            ]
        ]
    },
    {
        "id": "f4ad29da.d94c78",
        "type": "ui_gauge",
        "z": "a491c9dd.c8f358",
        "name": "Barometer",
        "group": "29219136.44d3de",
        "order": 4,
        "width": "3",
        "height": "3",
        "gtype": "donut",
        "title": "",
        "label": "hPa",
        "format": "{{msg.payload}}",
        "min": "950",
        "max": "1100",
        "colors": [
            "#8a2861",
            "#00e667",
            "#0505ff"
        ],
        "seg1": "1000",
        "seg2": "1050",
        "x": 910,
        "y": 260,
        "wires": []
    },
    {
        "id": "e3aa470b.d2cdf8",
        "type": "subflow:5f174a19.c0f3a4",
        "z": "a491c9dd.c8f358",
        "name": "Wind (idx=28,property=Gust)",
        "env": [
            {
                "name": "Idx",
                "value": "28",
                "type": "num"
            },
            {
                "name": "Property",
                "value": "Gust",
                "type": "str"
            }
        ],
        "x": 580,
        "y": 340,
        "wires": [
            [
                "3eff9b45.1dfb44"
            ]
        ]
    },
    {
        "id": "3eff9b45.1dfb44",
        "type": "ui_gauge",
        "z": "a491c9dd.c8f358",
        "name": "Windspeed",
        "group": "29219136.44d3de",
        "order": 5,
        "width": "3",
        "height": "3",
        "gtype": "donut",
        "title": "",
        "label": "Bf",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "12",
        "colors": [
            "#1eb300",
            "#00e667",
            "#ff3705"
        ],
        "seg1": "6",
        "seg2": "9",
        "x": 910,
        "y": 340,
        "wires": []
    },
    {
        "id": "6557d7f3.1124c",
        "type": "ui_button",
        "z": "a491c9dd.c8f358",
        "name": "Weather Refresh",
        "group": "29219136.44d3de",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "",
        "tooltip": "Aktualisieren",
        "color": "",
        "bgcolor": "",
        "icon": "fa-refresh fa-2x",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 310,
        "y": 140,
        "wires": [
            [
                "938fff0.815b2",
                "f14ecf6d.6b0fa",
                "e3aa470b.d2cdf8",
                "41817601.7bc658"
            ]
        ]
    },
    {
        "id": "6a22076b.308b78",
        "type": "ui_template",
        "z": "a491c9dd.c8f358",
        "group": "29219136.44d3de",
        "name": "Last Update",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<div layout=\"row\" layout-align=\"center end\">\n    <p ng-style=\"{'background-color': 'yellow', 'font-size': '0.6em'}\">Gemessen: {{msg.payload}}</p>\n</div>  \n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 910,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "41817601.7bc658",
        "type": "function",
        "z": "a491c9dd.c8f358",
        "name": "Set DateTime Now",
        "func": "// Helper functions\nvar date_now = function() {\n    var today = new Date();\n    var dd = today.getDate();\n    var mm = today.getMonth()+1; \n    var yyyy = today.getFullYear();\n    if(dd<10) dd='0'+dd;\n    if(mm<10) mm='0'+mm;\n    return dd+\"-\"+mm+\"-\"+yyyy;\n}\n\nvar time_now = function() {\n    var today = new Date();\n    var hh = today.getHours();\n    var mm = today.getMinutes(); \n    var ss = today.getSeconds(); \n    if(hh<10) hh='0'+hh;\n    if(mm<10) mm='0'+mm;\n    if(ss<10) ss='0'+ss;\n    return hh+\":\"+mm+\":\"+ss;\n}\n\nmsg.payload = date_now() + \" \" + time_now();\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 420,
        "wires": [
            [
                "6a22076b.308b78"
            ]
        ]
    },
    {
        "id": "29219136.44d3de",
        "type": "ui_group",
        "z": "",
        "name": "Wetter",
        "tab": "12c3f759.65b1a9",
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "12c3f759.65b1a9",
        "type": "ui_tab",
        "z": "",
        "name": "Wetter",
        "icon": "fa-sun-o 2x",
        "order": 3,
        "disabled": false,
        "hidden": false
    }
]