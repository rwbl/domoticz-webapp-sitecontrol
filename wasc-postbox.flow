[
    {
        "id": "5f174a19.c0f3a4",
        "type": "subflow",
        "name": "dom property",
        "info": "Get\n - a property or all properties for a specific device or\n - all device properties\n\n## Node Properties\n### Host\nIP address of the Domoticz System.\nUse 127.0.0.1 if Node-RED is running on the same system as Domoticz.\nDefault: 127.0.0.1\n\n### Port\nPort used by the Domoticz System.\nDefault: 8080\n\n### Context\nIf set to true, the global context value _domip_ for the Host & Port is used.\n`global.get(\"domip\")`\nDefault: false\n\n### Idx (Number)\nIdx of the device.\nIf the Idx is set to 0, then the status of ALL devices is returned. To select a device, use `msg.payload.result[index]`. The index start with 0 - array size -1.\n\n### Property (String)\nProperty of the device, taken from the HTTP API request result. Example: name or Temp.\nIf left blank, the full status is returned from which a property can be selected. Example:\n`msg.payload.Name` or `msg.payload.Temp`.\n\n### Input (JSON String)\nIf set to true, the input msg.payload is taken from a JSON string. The properties Idx & Property are not used. The JSON format: `{\"idx\":idx,\"property\":property}`.\nExample:\n`msgtemperature.payload = '{\"idx\":' + msg.payload.temperature+ ',\"property\":\"Temp\" }';\n`\n### Warn (Boolean)\nIf set to true, ode warn messages are logged.\n\n## Output\nValue of a single device property, all device properties or all devices properties.\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "1310efed.3ef4b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 180,
                "wires": [
                    {
                        "id": "2c4a6a11.7d82b6",
                        "port": 0
                    },
                    {
                        "id": "dc23718d.8e4ac",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Host",
                "type": "str",
                "value": "http://127.0.0.1"
            },
            {
                "name": "Port",
                "type": "num",
                "value": "8080"
            },
            {
                "name": "Context",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "Idx",
                "type": "num",
                "value": "0"
            },
            {
                "name": "Property",
                "type": "str",
                "value": "Name"
            },
            {
                "name": "Input",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "Warn",
                "type": "bool",
                "value": "false"
            }
        ],
        "color": "#DDAA99",
        "status": {
            "x": 740,
            "y": 260,
            "wires": [
                {
                    "id": "dc23718d.8e4ac",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "8d7eee82.ad127",
        "type": "http request",
        "z": "5f174a19.c0f3a4",
        "name": "Send HTTP Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 480,
        "y": 120,
        "wires": [
            [
                "44073955.f263a8"
            ]
        ]
    },
    {
        "id": "1310efed.3ef4b",
        "type": "function",
        "z": "5f174a19.c0f3a4",
        "name": "Set URL HTTP API Request",
        "func": "// Define the url for the http api request to get the devices status for given idx\n// The url syntax:\n// http://host-ip/json.htm?type=devices&rid=idx\n\n// Check if node warn log messages\nvar warn = env.get(\"Warn\");\nif (warn === undefined) warn = false;\n\n// Get the idx & property first\nvar idx = env.get(\"Idx\");\nvar property = env.get(\"Property\");\n\n// Check if to use input msg.payload as JSON string {\"idx\":idx,\"property\",property}\nvar input = env.get(\"Input\");\nif (input === true){\n    try {\n        const obj = JSON.parse(msg.payload);\n        idx = obj.idx;\n        property = obj.property;\n        if (warn === true) node.warn(\"Input JSON:\"+idx+\",\"+property);\n    } catch (e) {\n        if (warn === true) node.warn(\"Input message is not JSON format.\"+msg.payload);\n    }\n}\n    \n// Set the flow vars - used on other function nodes\nflow.set(\"idx\",idx);\nflow.set(\"property\",property)\n\n// Url & parameter\nvar url;\nvar urlparameter;\nvar alldevices = false;\n// Check the idx. If 0 get status all devices\nif (idx > 0) {\n    urlparameter = \"/json.htm?type=devices&rid=\" + idx;\n}\nif (idx === 0) {\n    urlparameter = \"/json.htm?type=devices&used=true&displayhidden=0\";\n    alldevices = true;\n}\n\n// Set the initial url using host & port\nconst usecontext = env.get(\"Context\");\nif (usecontext === true){\n    url = global.get(\"domip\");\n} else {\n    url = env.get(\"Host\") + \":\" + env.get(\"Port\");\n}\n\n// Define the url \nmsg.url = url + urlparameter;\n\nif (warn === true) node.warn(msg.url);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "8d7eee82.ad127"
            ]
        ]
    },
    {
        "id": "44073955.f263a8",
        "type": "json",
        "z": "5f174a19.c0f3a4",
        "name": "Convert Result",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 260,
        "y": 180,
        "wires": [
            [
                "2c4a6a11.7d82b6"
            ]
        ]
    },
    {
        "id": "2c4a6a11.7d82b6",
        "type": "function",
        "z": "5f174a19.c0f3a4",
        "name": "Get Device Status or Device Property",
        "func": "// Get the (all) device status or selected property\n// If the key Idx is 0, the status of all devices is returned\n// If the key Property is left blank get full device status\n// A property can be selected by using its key from the msg.payload\n// Example: msg.payload.Temp\n// If the idx is not found, an undefined msg is returned\n\n// Debug flag\nvar warn = env.get(\"Warn\");\nif (warn === undefined) warn = false;\n\n// Assign the array key result and check the size\nconst result = msg.payload.result;\n\n// Array result contains single entry for a device\nif (result.length == 1){\n    // Device status from the array key result first (and only entry)\n    const status = result[0];\n    if (status !== undefined){\n        // Get the propertykey for the given key\n        var propertyKey = flow.get(\"property\");\n        // If no property key given, select the full status\n        if (propertyKey.length === 0) {\n            msg.payload = status\n            if (warn === true) node.warn(\"SINGLERESULTFULL:\"+\"Idx:\"+status.idx+\", FULL result\");\n        } else {\n            // Set the msg payload by assigning the property key\n            msg.payload = status[propertyKey];\n            if (warn === true) node.warn(\"SINGLERESULTPROP:\"+\"Idx:\"+status.idx+\", Property:\"+propertyKey+\", Value:\"+msg.payload);\n        }   \n    } else {\n        msg.payload = undefined;\n    }\n}\n\n// Array result contains multiple entries\nif (result.length > 1){\n    msg.payload = result;\n    if (warn === true) node.warn(\"MULTIPLERESULTS:\"+msg.payload);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "84f9e515.98a678",
        "type": "comment",
        "z": "5f174a19.c0f3a4",
        "name": "Subflow Domoticz Property (dom property)",
        "info": "See the subflow description.\n",
        "x": 180,
        "y": 40,
        "wires": []
    },
    {
        "id": "6aea601f.cb02",
        "type": "catch",
        "z": "5f174a19.c0f3a4",
        "name": "Catch Error HTTP & JSON",
        "scope": [
            "8d7eee82.ad127",
            "44073955.f263a8"
        ],
        "uncaught": false,
        "x": 130,
        "y": 240,
        "wires": [
            [
                "57d35e8f.86a1b",
                "dc23718d.8e4ac"
            ]
        ]
    },
    {
        "id": "57d35e8f.86a1b",
        "type": "debug",
        "z": "5f174a19.c0f3a4",
        "name": "DEBUG CATCHDOMPROPERTY",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 500,
        "y": 300,
        "wires": []
    },
    {
        "id": "dc23718d.8e4ac",
        "type": "function",
        "z": "5f174a19.c0f3a4",
        "name": "Set Status",
        "func": "var msgstatus = {};\nmsgstatus.payload = \"Ok\";\n// node.warn(msg.error.message);\nif (msg.error.message.length > 0){\n    msg.payload = \"Error\" + \" \" + msg.error.source.type;\n    msgstatus.payload = \"Error\";\n}\nreturn [msg,msgstatus];",
        "outputs": 2,
        "noerr": 0,
        "x": 610,
        "y": 240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "e925fa9.2a1ba08",
        "type": "tab",
        "label": "WASC-Postbox",
        "disabled": false,
        "info": "Monitor the status of the postbox.\nontroled by a HomematicIP switch SWDO.\n"
    },
    {
        "id": "8bd6ac0a.4b327",
        "type": "comment",
        "z": "e925fa9.2a1ba08",
        "name": "WASC-Postbox - Tab Briefkasten, Group Briefkasten; Update every 5 minutes",
        "info": "Control the postbox - brief description.\n\nThe function node \"Configure ...\" defines the idx of the devices:\n(idx- name,type, subtype)\n189 - Status, Light/Switch, Switch\n190 - Batterie, General, Voltage\n\nIf the postbox flap is opened, the ui_text node shows state opened with date&time.\n\nThe state can be refreshed or reset after checking the postbox. If reset, the ui_text states closed (“geschlossen”).\n",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "4d93ebb5.4a9ea4",
        "type": "ui_template",
        "z": "e925fa9.2a1ba08",
        "group": "7fea8d18.1f4e24",
        "name": "Set Group Style",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<style>\n/*\n    For all elements in the group\n*/\n#Briefkasten_Briefkasten_cards {\n    font-size: 20px !important;\n    background-color: \"#FF0000\" !important;\n}\n\n/*\n    For all cardtitles\n.nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n    color: #ff0000;\n}\n*/\n\n/* \n    #RaspberryMatic_Dashboard_Hue_cardtitle {\n        font-size: 20px !important;\n        background-color: \"#FF0000\" !important;\n    }\n*/\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 100,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c4af4160.b894a",
        "type": "inject",
        "z": "e925fa9.2a1ba08",
        "name": "Request Device Status",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "b8d5a8de.6ed648",
                "2952832d.01e1bc"
            ]
        ]
    },
    {
        "id": "47bbdad0.2858b4",
        "type": "inject",
        "z": "e925fa9.2a1ba08",
        "name": "",
        "topic": "",
        "payload": "189",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "x": 90,
        "y": 140,
        "wires": [
            [
                "add34e7e.7a863"
            ]
        ]
    },
    {
        "id": "add34e7e.7a863",
        "type": "function",
        "z": "e925fa9.2a1ba08",
        "name": "Configure Postbox (idx=189,190)",
        "func": "// Define the flow context for the postbox\n// Use the first device idx as flow context name\n\nconst debug = global.get(\"debug\");\n\n// Set the flow context: name, state, operatingvoltage\nfunction setFlowContext(flowvar,name,state,operatingvoltage) {\n    flow.set(\"name\",name);\n    flow.set(\"state\",state);\n    flow.set(\"operatingvoltage\",operatingvoltage);\n\n    if (debug === true){\n        node.warn(\"Name=\"+flow.get(\"name\") + \n            \",State=\"+flow.get(\"state\") +\n            \",Voltage=\"+flow.get(\"operatingvoltage\")\n        );\n    }\n}\n\n// Postbox switch SWDO\nsetFlowContext(\"189\",\"Briefkasten\",189,190);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "9a41818d.11b24",
        "type": "ui_text",
        "z": "e925fa9.2a1ba08",
        "group": "7fea8d18.1f4e24",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Postbox Operating Voltage",
        "label": "Batterie",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 860,
        "y": 280,
        "wires": []
    },
    {
        "id": "89384820.0c3098",
        "type": "ui_button",
        "z": "e925fa9.2a1ba08",
        "name": "Postbox State Reset",
        "group": "7fea8d18.1f4e24",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "Status zurücksetzen",
        "color": "",
        "bgcolor": "",
        "icon": "fa-check-circle fa-2x",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 840,
        "y": 340,
        "wires": [
            [
                "427837bb.a005e8"
            ]
        ]
    },
    {
        "id": "2990ce72.074092",
        "type": "ui_toast",
        "z": "e925fa9.2a1ba08",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Postbox Notification State",
        "x": 1110,
        "y": 220,
        "wires": []
    },
    {
        "id": "91ce1cc9.f7f67",
        "type": "ui_text",
        "z": "e925fa9.2a1ba08",
        "group": "7fea8d18.1f4e24",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Postbox Message State",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1110,
        "y": 180,
        "wires": []
    },
    {
        "id": "e15e20bb.2b01d",
        "type": "function",
        "z": "e925fa9.2a1ba08",
        "name": "Set Messages Postbox",
        "func": "const debug = global.get(\"debug\");\n\n// Define the postbox OPEN message\n// There are 2 messages 1)Email, 2)UI\n\n// Get status\nconst state = msg.payload.Status;\n\n// Get last update\nconst lastupdate = msg.payload.LastUpdate;\n\n// Set message depending state\nmsg.topic = \"Briefkasten\";\nif (state == \"On\") {\n    msg.payload = \"Geöffnet \" + lastupdate;        \n    // Email message with action\n    var msgnotification = {};\n    msgnotification.topic = \"Briefkasten: \" + msg.payload;\n    msgnotification.payload = \"Aktion: Status zurücksetzen.\";\n}\nelse {\n    msg.payload = \"Geschlossen\";\n    msgnotification = null;\n}\n\nif (debug === true) node.warn(msg.payload);\n\nnode.status({text:msg.payload});\n\nreturn [msg,msgnotification];\n",
        "outputs": 2,
        "noerr": 0,
        "x": 840,
        "y": 200,
        "wires": [
            [
                "91ce1cc9.f7f67"
            ],
            [
                "2990ce72.074092"
            ]
        ]
    },
    {
        "id": "427837bb.a005e8",
        "type": "function",
        "z": "e925fa9.2a1ba08",
        "name": "Set URL State Reset",
        "func": "const debug = global.get(\"debug\");\n\n// Define the payload to switch the light\nconst idx = flow.get(\"state\");  // number\nconst switchcmd = \"Off\";\n\n// Define the url for the list of devices using the state script\n// /json.htm?type=command&param=switchlight&idx=99&switchcmd=Off\nmsg.url = global.get(\"domip\") + \"/json.htm?type=command&param=switchlight&idx=\" + idx + \"&switchcmd=\" + switchcmd;\n\nif (debug === true) node.warn(msg.url);\n\nnode.status({text:idx + \",\" + switchcmd});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1100,
        "y": 340,
        "wires": [
            [
                "30220db4.810e62"
            ]
        ]
    },
    {
        "id": "30220db4.810e62",
        "type": "http request",
        "z": "e925fa9.2a1ba08",
        "name": "Send HTTP Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1360,
        "y": 340,
        "wires": [
            [
                "1ce41db6.ea4872"
            ]
        ]
    },
    {
        "id": "1ce41db6.ea4872",
        "type": "ui_button",
        "z": "e925fa9.2a1ba08",
        "name": "Postbox State Refresh",
        "group": "7fea8d18.1f4e24",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": true,
        "label": "",
        "tooltip": "Status aktualisieren",
        "color": "",
        "bgcolor": "",
        "icon": "fa-refresh fa-2x",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 840,
        "y": 400,
        "wires": [
            [
                "cfc54254.5dc55"
            ]
        ]
    },
    {
        "id": "b8d5a8de.6ed648",
        "type": "subflow:5f174a19.c0f3a4",
        "z": "e925fa9.2a1ba08",
        "name": "Postbox State (idx=189,property=not used)",
        "env": [
            {
                "name": "Idx",
                "value": "189",
                "type": "num"
            },
            {
                "name": "Property",
                "value": "",
                "type": "str"
            }
        ],
        "x": 490,
        "y": 200,
        "wires": [
            [
                "e15e20bb.2b01d"
            ]
        ]
    },
    {
        "id": "2952832d.01e1bc",
        "type": "subflow:5f174a19.c0f3a4",
        "z": "e925fa9.2a1ba08",
        "name": "Postbox Operating Voltage (idx=190,property=Data)",
        "env": [
            {
                "name": "Idx",
                "value": "190",
                "type": "num"
            },
            {
                "name": "Property",
                "value": "Data",
                "type": "str"
            }
        ],
        "x": 510,
        "y": 280,
        "wires": [
            [
                "9a41818d.11b24"
            ]
        ]
    },
    {
        "id": "cfc54254.5dc55",
        "type": "function",
        "z": "e925fa9.2a1ba08",
        "name": "Pass Refresh Msg",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 130,
        "y": 400,
        "wires": [
            [
                "b8d5a8de.6ed648",
                "2952832d.01e1bc"
            ]
        ]
    },
    {
        "id": "7fea8d18.1f4e24",
        "type": "ui_group",
        "z": "",
        "name": "Briefkasten",
        "tab": "9ef6d8b5.ace438",
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9ef6d8b5.ace438",
        "type": "ui_tab",
        "z": "",
        "name": "Briefkasten",
        "icon": "fa-inbox",
        "order": 4,
        "disabled": false,
        "hidden": false
    }
]